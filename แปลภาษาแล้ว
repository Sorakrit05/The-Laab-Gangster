#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <ctime>
#include <cstdlib>

using namespace std;

vector<string> meats = {"Beef", "Pork", "Poultry"};
vector<string> herbs = {"Mint", "Coriander", "Spring Onion"};
vector<string> spices = {"Cayenne", "Roasted Rice", "Fish Sauce"};
vector<string> vegetables = {"Cabbage", "Cucumber", "Shallots"};


vector<string> destinyCards = {
    "Added 1 additional ingredient", "Loss of 1 ingredient", "Steal ingredients from other players",
    "Trade ingredients with other players", "Roll the dice again", "Lose the next turn"
};


string drawDestinyCard() {
    int index = rand() % destinyCards.size();
    return destinyCards[index];
}


vector<string> rollDice(int numDice) {
    vector<string> colors = {"Red", "Brown", "Orange", "Green"};
    vector<string> result;
    for (int i = 0; i < numDice; ++i) {
        int index = rand() % colors.size();
        result.push_back(colors[index]);
    }
    return result;
}


bool hasDuplicates(vector<string> diceResult) {
    sort(diceResult.begin(), diceResult.end());
    auto last = unique(diceResult.begin(), diceResult.end());
    return last != diceResult.end();
}


struct Player {
    string name;
    string lastAteLab;
    vector<string> recipe;
    vector<string> ingredients;
};


int main() {
    srand(time(0));

    int numPlayers;
    cout << "Select the number of players (up to 4): ";
    cin >> numPlayers;

    vector<Player> players(numPlayers);
    for (int i = 0; i < numPlayers; ++i) {
        cout << "Player " << i + 1 << " Please enter your name: ";
        cin >> players[i].name;
        cout << "When was the last time you ate laab?: ";
        cin >> players[i].lastAteLab;
    }

   
    int currentPlayerIndex = rand() % numPlayers;
    cout << "First player are: " << players[currentPlayerIndex].name << endl;

 
    bool gameOver = false;
    while (!gameOver) {
        Player &currentPlayer = players[currentPlayerIndex];
        cout << "Turn of " << currentPlayer.name << endl;

        vector<string> diceResult = rollDice(4);
        cout << "Dice results: ";
        for (string color : diceResult) {
            cout << color << " ";
        }
        cout << endl;

        if (hasDuplicates(diceResult)) {
            cout << "Get the same color, you have to open the Destiny card!" << endl;
            string card = drawDestinyCard();
            cout << "Destiny card: " << card << endl;
     
        } else {
            cout << "Select ingredients according to the color obtained:" << endl;
            for (string color : diceResult) {
                if (color == "Red") {
                    cout << "Select meat: ";
                    for (int i = 0; i < meats.size(); ++i) {
                        cout << i + 1 << ". " << meats[i] << " ";
                    }
                    int choice;
                    cin >> choice;
                    currentPlayer.ingredients.push_back(meats[choice - 1]);
                } else if (color == "Brown") {
                    cout << "Select herbs: ";
                    for (int i = 0; i < herbs.size(); ++i) {
                        cout << i + 1 << ". " << herbs[i] << " ";
                    }
                    int choice;
                    cin >> choice;
                    currentPlayer.ingredients.push_back(herbs[choice - 1]);
                } else if (color == "Orange") {
                    cout << "Select spices: ";
                    for (int i = 0; i < spices.size(); ++i) {
                        cout << i + 1 << ". " << spices[i] << " ";
                    }
                    int choice;
                    cin >> choice;
                    currentPlayer.ingredients.push_back(spices[choice - 1]);
                } else if (color == "Green") {
                    cout << "Select vegetables: ";
                    for (int i = 0; i < vegetables.size(); ++i) {
                        cout << i + 1 << ". " << vegetables[i] << " ";
                    }
                    int choice;
                    cin >> choice;
                    currentPlayer.ingredients.push_back(vegetables[choice - 1]);
                }
            }
        }
        currentPlayerIndex = (currentPlayerIndex + 1) % numPlayers;
    }

    return 0;
}
